<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Never stop exploring</title>
    <description>A developer journey</description>
    <link>http://aleron75.github.io/</link>
    <atom:link href="http://aleron75.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 12 Aug 2016 12:59:40 +0000</pubDate>
    <lastBuildDate>Fri, 12 Aug 2016 12:59:40 +0000</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Magento 2 script for setup upgrade</title>
        <description>&lt;p&gt;To determine whether your current &lt;strong&gt;Magento 2&lt;/strong&gt; instance needs &lt;strong&gt;upgrade scripts&lt;/strong&gt; to run you can use the following CLI command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/magento setup:db:status
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output can either be something like this (if upgrade is needed):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The module code base doesn&#39;t match the DB schema and data.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or like this (if no upgrade is needed):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;All modules are up to date.    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unfortunately, at date, the Magento 2 CLI doesn’t return &lt;strong&gt;different exit codes&lt;/strong&gt; in case of different outcomes, that’s something that can be useful especially if you use some &lt;strong&gt;CI or deploy tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus I wrote a simple &lt;strong&gt;bash script&lt;/strong&gt; that converts different text outputs in different exit codes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# use --no-ansi to avoid color characters&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;bin/magento setup:db:status --no-ansi&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;:0:3&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;All&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0 &lt;span class=&quot;c&quot;&gt;# 0 not required being default exit code; used for clarity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can also download it &lt;a href=&quot;https://gist.github.com/aleron75/5b35f8b670ad24bffbca48c0370135ec&quot;&gt;from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Photo credits: &lt;a href=&quot;https://www.flickr.com/photos/132889348@N07/&quot;&gt;Christiaan Colen&lt;/a&gt; - &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/2.0/&quot;&gt;Creative Commons license&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://aleron75.github.io/2016/08/12/magento2-script-for-setup-upgrade/</link>
        <guid isPermaLink="true">http://aleron75.github.io/2016/08/12/magento2-script-for-setup-upgrade/</guid>
        
        <category>magento2</category>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Because programmers are lazy</title>
        <description>&lt;p&gt;It’s a simple story: I wanted to be able to put &lt;strong&gt;comments in JSON files&lt;/strong&gt;,
specifically in my composer.json files.&lt;/p&gt;

&lt;p&gt;Why? Because sometimes I want to give a try to third-party without deleting
references to them if I decide not to keep them in my composer.json file.&lt;/p&gt;

&lt;p&gt;Or maybe sometimes I simply want to include comments above some dependencies.&lt;/p&gt;

&lt;p&gt;You probably know that it’s something not allowed by JSON parsers.&lt;/p&gt;

&lt;p&gt;I thought that implementing a simple script that wipes out lines starting with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; character would have been faster that searching for some existing
solution.&lt;/p&gt;

&lt;p&gt;So I implemented it and just because commented lines brought to &lt;strong&gt;lists with
trailing commas&lt;/strong&gt;, I also added some lines of code to wipe that trailing commas
too.&lt;/p&gt;

&lt;p&gt;And that’s almost it, here is the script with instructions on how to install
and use it: &lt;a href=&quot;https://github.com/aleron75/jsonc&quot;&gt;https://github.com/aleron75/jsonc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a positive side effect: this script assumes you work on a separate file
with &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonc&lt;/code&gt; extension and generates the corresponding well-formed &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;You can keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; file under version control and ignore the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonc&lt;/code&gt;; this
way each developer can keep his/her version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonc&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;It’s not rocket science and since I wrote the script in minutes it it likely
that it won’t work for everyone.&lt;/p&gt;

&lt;p&gt;In that case: contributions are welcome :)&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Photo credits: &lt;a href=&quot;https://www.flickr.com/photos/guppiecat/&quot;&gt;Josh More&lt;/a&gt; - &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/2.0/&quot;&gt;Creative Commons license&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://aleron75.github.io/2016/06/20/because-programmers-are-lazy/</link>
        <guid isPermaLink="true">http://aleron75.github.io/2016/06/20/because-programmers-are-lazy/</guid>
        
        <category>json</category>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Let&#39;s poke with Magento 2 runtime</title>
        <description>&lt;p&gt;One of my favorite way of learning Magento framework was that of initializing a &lt;strong&gt;Magento runtime&lt;/strong&gt; and poking with it through the &lt;strong&gt;command line&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I usually recommend writing &lt;strong&gt;shell scripts as best practice&lt;/strong&gt; for Magento 1 instead of using &lt;a href=&quot;https://gist.github.com/search?utf8=%E2%9C%93&amp;amp;q=runtime+user%3Aaleron75&amp;amp;ref=searchresults&quot;&gt;bare minimum PHP scripts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since shell scripts in Magento 2 left space to &lt;strong&gt;Command Line Interface (CLI) commands&lt;/strong&gt;, PHP scripts come back in handy.&lt;/p&gt;

&lt;p&gt;Here is a first example of a PHP script that can be put in Magento 2 installation directory (the one that contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;pub&lt;/code&gt; subdirectory):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try {
    require __DIR__ . &#39;/app/bootstrap.php&#39;;
} catch (\Exception $e) {
    echo $e-&amp;gt;getMessage() . PHP_EOL;
    exit(1);
}

$bootstrap = \Magento\Framework\App\Bootstrap::create(BP, $_SERVER);
/** @var \Magento\Framework\App\Http $app */
$app = $bootstrap-&amp;gt;createApplication(&#39;Magento\Framework\App\Http&#39;);
$app-&amp;gt;launch();

// YOUR CODE HERE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What can we do with that piece of script?&lt;/p&gt;

&lt;p&gt;Well, what follows is a step-by-step example of how to retrieve a collection of products; we should place the following code after the &lt;code class=&quot;highlighter-rouge&quot;&gt;// YOUR CODE HERE&lt;/code&gt; comment.&lt;/p&gt;

&lt;p&gt;First of all: we don’t have any more &lt;strong&gt;static methods&lt;/strong&gt; to invoke on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Mage&lt;/code&gt; class; neither are we encouraged to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; statement to instantiate objects.&lt;/p&gt;

&lt;p&gt;There are several &lt;strong&gt;new ways of instantiating objects&lt;/strong&gt; within Magento 2 and I warmly recommend to read &lt;a href=&quot;http://magento-quickies.alanstorm.com/post/142637117380/magento-2-shared-instances-and-dependency&quot;&gt;this quickie by Alan Storm&lt;/a&gt; to get an idea.&lt;/p&gt;

&lt;p&gt;For our example let’s use the &lt;strong&gt;object manager&lt;/strong&gt;, provided by our &lt;code class=&quot;highlighter-rouge&quot;&gt;$bootstrap&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$objectManager = $bootstrap-&amp;gt;getObjectManager();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have our shiny object manager, we can instantiate a &lt;strong&gt;product factory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Wait what? We use an object to instantiate a factory object which in turn will be used to instantiate objects? Yes, remember: we are poking around, we aren’t doing things according to best practices.&lt;/p&gt;

&lt;p&gt;In an ideal world we would write our code in a class; that class will be injected needed dependencies through its constructor; the object manager will do that work under the hood without any need for us to use it directly.
But that’s not the scenario that occurs here in our PHP script.&lt;/p&gt;

&lt;p&gt;So let’s ask the object manager to provide a product factory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$productFactory = $objectManager-&amp;gt;create(&#39;Magento\Catalog\Model\ProductFactory&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; factory classes are dynamically generated by Magento 2. For example, we won’t find the &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductFactory&lt;/code&gt; class under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Magento_Catalog&lt;/code&gt; module; if we want to find it we have to dig into &lt;code class=&quot;highlighter-rouge&quot;&gt;var/generation/Magento/Catalog/Model&lt;/code&gt; path.&lt;/p&gt;

&lt;p&gt;Once we have our &lt;code class=&quot;highlighter-rouge&quot;&gt;$productFactory&lt;/code&gt; we can get a product collection and count results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$collection = $productFactory-&amp;gt;create()-&amp;gt;getCollection();
echo &#39;Total products:&#39;, $collection-&amp;gt;count(), PHP_EOL;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/aleron75/648624e22744d5ed88037b6ac56ddf54&quot;&gt;Here is the complete code snippet&lt;/a&gt; in case you want to download it.&lt;/p&gt;

&lt;p&gt;Note that what I’ve shown is still a &lt;strong&gt;work in progress&lt;/strong&gt; script, lacking things like initialization of &lt;strong&gt;application area&lt;/strong&gt; and &lt;strong&gt;user session&lt;/strong&gt;; I will post updates here in the future, so stay tuned and enjoy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many thanks to my beloved mentor &lt;a href=&quot;https://twitter.com/vinaikopp&quot;&gt;Vinai Kopp&lt;/a&gt; who, after reading this post gave me some useful advices.&lt;/p&gt;

&lt;p&gt;First advice: from PHP 5.5 we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;::class&lt;/code&gt; directive to get the fully qualified class name:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$objectManager-&amp;gt;create(\Magento\Catalog\Model\ProductFactory::class);`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;instead of:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$objectManager-&amp;gt;create(&#39;Magento\Catalog\Model\ProductFactory&#39;);`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Second advice: we can instantiate the product collection factory directly instead of
using the product factory and then get the collection:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$productCollectionFactory = $objectManager-&amp;gt;create(\Magento\Catalog\Model\ResourceModel\Product\CollectionFactory::class);
$collection = $productCollectionFactory-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another interesting thought triggered by Vinai reading my post is that there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;\Magento\Framework\AppInterface&lt;/code&gt; implementation for CLI applications; indeed the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/magento&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;SymfonyApplication&lt;/code&gt; and doesn’t implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppInterface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;He pushed me to open &lt;a href=&quot;https://github.com/magento/magento2/issues/5001&quot;&gt;an issue&lt;/a&gt; asking the Magento 2 team for such an implementation.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Photo credits: &lt;a href=&quot;https://www.flickr.com/photos/bambe1964/&quot;&gt;bambe1964&lt;/a&gt; - &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/2.0/&quot;&gt;Creative Commons license&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://aleron75.github.io/2016/06/10/let-s-poke-with-magento-2-runtime/</link>
        <guid isPermaLink="true">http://aleron75.github.io/2016/06/10/let-s-poke-with-magento-2-runtime/</guid>
        
        <category>magento2</category>
        
        <category>runtime</category>
        
        
      </item>
    
      <item>
        <title>Never stop exploring</title>
        <description>&lt;p&gt;Recently I attended &lt;a href=&quot;https://www.meet-magento.nl/&quot;&gt;Meet Magento NL 2016&lt;/a&gt; and it
was my first time in the Netherlands.&lt;/p&gt;

&lt;p&gt;One of the things that impressed me was the “exploring spirit” of Dutch people.&lt;/p&gt;

&lt;p&gt;I had that feeling since I landed at Amsterdam Shiphol airport and it was
confirmed as soon as I arrived at my host’s apartment where there were plenty of
books, wall writings and pictures about never stopping exploring.&lt;/p&gt;

&lt;p&gt;And that’s why I decided to give my new technical blog the title it has, because
it represents my attitude towards technology and life in general.&lt;/p&gt;

&lt;p&gt;In this blog I will collect my day by day discoverings about Magento and related
technologies.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Photo credits: &lt;a href=&quot;https://www.flickr.com/photos/hereistom/&quot;&gt;Tom Jutte&lt;/a&gt; - &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-nd/2.0/&quot;&gt;Creative Commons license&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>
        <link>http://aleron75.github.io/2016/06/09/never-stop-exploring/</link>
        <guid isPermaLink="true">http://aleron75.github.io/2016/06/09/never-stop-exploring/</guid>
        
        <category>netherlands</category>
        
        <category>meet-magento</category>
        
        
      </item>
    
  </channel>
</rss>
